ALGORITHM:
This algorithm finds out whether or not a system is in a safe state
	•	Input the no. of processes (n), no. of resources (m) from the user.
	•	Also input the available, allocated and maximum resources for each process from the user
	•	Calculate need for each process
	•	Let Work and Finish be vectors of length ‘m’ and ‘n’ respectively. Initialize: Work = Available
Finish[i] =0(false); for i=1, 2, 3, 4….n
	•	Find an i such that both
	•	Finish[i] =0(false)
	•	Need[i] <= Work If no such i exists goto step 7)
	•	Safestate <- i
Work = Work + Allocation[i] Finish[i] =1 (true)
goto step 5)

	•	If Finish [i] = true for all i then the system is in a safe state .
RESOURCE REQUEST ALLOCATION ALGORITHM: ALGORITHM:
This algorithm is mainly used to determine whether requests can be safely granted or not.
Let Requesti be the request vector for the process Pi. If Requesti[j]==k, then process Pi wants k instance of Resource type Rj. When a request for resources is made by the process Pi, the following are the actions that will be taken:
	•	If Requesti <= Needi, then go to step 2); else raise an error condition, since the process has exceeded its maximum claim.
	•	If Requesti <= Availablei then go to step 3); else Pi must have to wait as resources are not available.
	•	Assume that resources are assigned to process Pi and thus perform the following steps:
	•	Available= Available-Requesti;
	•	Allocationi=Allocationi +Requesti;
	•	Needi =Needi - Requesti;
If the resulting resource allocation state comes out to be safe, then the transaction is completed and, process Pi is allocated its resources. But in this case, if the new state is unsafe, then Pi waits for Requesti, and the old resource- allocation state is restored.
PROGRAM:
//Banker's Algorithm

#include<stdio.h> #include<stdlib.h>

int m,n,i,j,flag,k=0;
int available[20],work[20],finish[20],safestate[20],req[20]; int allocated[20][20],max[20][20],need[20][20];

int request() //Resource Request allocation algorithm
{
int processreq;
printf("Enter the process that is requesting : ");
//Banker's Algorithm

#include<stdio.h> #include<stdlib.h>

int m,n,i,j,flag,k=0;
int available[20],work[20],finish[20],safestate[20],req[20]; int allocated[20][20],max[20][20],need[20][20];

int request() //Resource Request allocation algorithm
{
int processreq;
printf("Enter the process that is requesting : ");
scanf("%d",&processreq); printf("Enter the reqested array : "); for(i=0;i<m;i++) scanf("%d",&req[i]);

for(j=0;j<m;j++)
{
if(req[j]<=need[processreq][j])

{
if(req[j]<=available[j])
{
available[j]=available[j]-req[j]; allocated[processreq][j]=allocated[processreq][j]+req[j];
need[processreq][j]=need[processreq][j]-req[j]; printf("Available : %d ",available[j]);

}
printf("\tNeed: %d\n",need[processreq][j]);
}
else
{
printf("Process is not in safe state and hence request cannot be granted\n"); exit(0);
}
}
printf("Request can be granted\n"); return 0;
}

int safety() //Safety algorithm
{
int x=0;for (k=0;k<n;k++)
{
for (i=0;i<n;i++)
{
if (finish[i]==0)
{
flag=0;
for (j=0;j<m;j++)
{
if (need[i][j]>work[j])
{
flag=1; break;
}
}
if (flag==0)
{
safestate[x++]=i;
for (int y=0;y<m;y++) work[y]=work[y]+allocated[i][y];
finish[i]=1;}
}
}
}
flag=0; for(i=0;i<n;i++) if(finish[i]==0)
flag++;

if(flag>0)
{
printf("DEADLOCK.	\n");
}


else
{
printf("SAFE STATES : ");
for(i=0;i<n;i++)
printf("P%d ",safestate[i]); printf("\n");
}
return 0;
}

int main()
{
printf("Enter the no. of process: "); scanf("%d",&n);
printf("Enter the no. of resources: "); scanf("%d",&m);

printf("Enter the available resources:\n"); for(i=0;i<m;i++)
{
scanf("%d",&available[i]); work[i]=available[i];
}

printf("Enter the allocated resources for each process:\n"); for(i=0;i<n;i++)
{
for(j=0;j<m;j++) scanf("%d",&allocated[i][j]);
}

printf("Enter the maximum resources for each process:\n"); for(i=0;i<n;i++)

{
for(j=0;j<m;j++)
{
scanf("%d",&max[i][j]);
need[i][j]=max[i][j]-allocated[i][j];
}
}

for(i=0;i<n;i++) finish[i]=0;

printf("\nSAFETY ALGORITHM :\n"); safety();

printf("\nRESOURCE REQUEST ALLOCATION ALGORITHM :\n");
request();

return 0;
}
{
for(j=0;j<m;j++)
{
scanf("%d",&max[i][j]);
need[i][j]=max[i][j]-allocated[i][j];
}
}

for(i=0;i<n;i++) finish[i]=0;

printf("\nSAFETY ALGORITHM :\n"); safety();

printf("\nRESOURCE REQUEST ALLOCATION ALGORITHM :\n");
request();

return 0;
}
